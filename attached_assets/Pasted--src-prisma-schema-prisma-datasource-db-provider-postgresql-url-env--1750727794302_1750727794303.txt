/*
 * src/prisma/schema.prisma
 */
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id        String    @id @default(uuid())
  name      String
  incidents Incident[]
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  incidents Incident[] @relation("Assignee")
}

model Incident {
  id                String   @id @default(uuid())
  organization      Organization @relation(fields: [organizationId], references: [id])
  organizationId    String
  date              DateTime
  type              String
  description       String
  attachments       String[] @default([])
  assignee          User?    @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId        String?
  semanticContext   String?
  lgpdArticles      String[] @default([])
  dataCategories    String[] @default([])
  numSubjects       Int?
  riskLevel         String?
  immediateMeasures String?
  actionPlan        String?
  isDraft           Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}


/*
 * src/routes/incidents.ts
 */
import { Router } from 'express';
import { PrismaClient } from '@prisma/client';
import { body, validationResult } from 'express-validator';

const prisma = new PrismaClient();
const router = Router();

// POST create incident
router.post(
  '/api/v1/incidents',
  body('organizationId').isUUID(),
  body('date').isISO8601(),
  body('type').isString().notEmpty(),
  body('description').isString().isLength({ min: 50 }),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const {
      organizationId,
      date,
      type,
      description,
      attachments = [],
      assigneeId,
      // analysis fields optional
      semanticContext,
      lgpdArticles,
      dataCategories,
      numSubjects,
      riskLevel,
      immediateMeasures,
      actionPlan,
      isDraft = false,
    } = req.body;

    try {
      const incident = await prisma.incident.create({
        data: {
          organizationId,
          date: new Date(date),
          type,
          description,
          attachments,
          assigneeId,
          semanticContext,
          lgpdArticles,
          dataCategories,
          numSubjects,
          riskLevel,
          immediateMeasures,
          actionPlan,
          isDraft,
        },
      });
      res.status(201).json(incident);
    } catch (error: any) {
      console.error('Error creating incident:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
);

export default router;

/*
 * src/server.ts (snippet)
 */
import express from 'express';
import incidentsRouter from './routes/incidents';

const app = express();
app.use(express.json());

// ... other middlewares (auth, etc.)
app.use(incidentsRouter);

export default app;
