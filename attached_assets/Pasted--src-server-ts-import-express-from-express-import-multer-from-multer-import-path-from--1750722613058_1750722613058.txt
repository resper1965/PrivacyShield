/* src/server.ts */
import express from 'express';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import {Client as ClamavClient} from 'clamdjs';

const app = express();
const PORT = process.env.PORT || 3000;

// upload dir
const UPLOAD_DIR = path.resolve(__dirname, '../uploads');
if (!fs.existsSync(UPLOAD_DIR)) fs.mkdirSync(UPLOAD_DIR, { recursive: true });

// Multer setup
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, UPLOAD_DIR),
  filename: (req, file, cb) => cb(null, Date.now() + '-' + file.originalname),
});
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    // accept only ZIP
    if (file.mimetype !== 'application/zip' && !file.originalname.match(/\.zip$/i)) {
      return cb(new Error('Invalid file type'), false);
    }
    cb(null, true);
  }
});

// ClamAV client
const clamav = new ClamavClient({
  host: process.env.CLAMAV_HOST || 'localhost',
  port: Number(process.env.CLAMAV_PORT) || 3310,
  timeout: 60000,
});

// Helper: scan a file
async function scanFile(filePath: string): Promise<boolean> {
  const stream = fs.createReadStream(filePath);
  const { isInfected } = await clamav.scan(stream);
  return !isInfected;
}

// Route: upload ZIP
app.post('/api/zip', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ error: 'No file' });
    const filePath = req.file.path;
    const ok = await scanFile(filePath);
    if (!ok) {
      fs.unlinkSync(filePath);
      return res.status(422).json({ error: 'File infected, upload rejected' });
    }
    res.json({ message: 'File accepted', filename: path.basename(filePath) });
  } catch (err: any) {
    console.error(err);
    return res.status(500).json({ error: err.message });
  }
});

// Route: process local file by name
app.get('/api/zip/local', async (req, res) => {
  try {
    const name = String(req.query.name || '');
    const filePath = path.join(UPLOAD_DIR, name);
    if (!fs.existsSync(filePath)) return res.status(404).json({ error: 'File not found' });
    // validate mimetype by extension
    if (!name.match(/\.zip$/i)) {
      return res.status(400).json({ error: 'Not a ZIP file' });
    }
    const ok = await scanFile(filePath);
    if (!ok) return res.status(422).json({ error: 'File infected' });
    res.json({ message: 'Local file accepted', filename: name });
  } catch (err: any) {
    console.error(err);
    return res.status(500).json({ error: err.message });
  }
});

// Health check
app.get('/healthz', (_req, res) => res.send({ status: 'ok' }));

app.listen(PORT, () => console.log(`Server listening on port ${PORT}`));
