#!/usr/bin/env bash
# install.sh – n.PIIdetector Homolog | VPS Ubuntu 22.04

set -euo pipefail

export DOMAIN="monster.e-ness.com.br"
export EMAIL="certs@ness.com.br"          # e‑mail p/ Let's Encrypt
export PII_DB_PASS="$(openssl rand -base64 24)"
export SESSION_SECRET="$(openssl rand -base64 32)"
# OpenAI API Key - MUST be provided as environment variable before running this script
if [ -z "${OPENAI_API_KEY:-}" ]; then
  echo "ERROR: OPENAI_API_KEY environment variable is required"
  echo "Please set it before running this script: export OPENAI_API_KEY='your-key-here'"
  exit 1
fi

# 1. Docker + Compose
curl -fsSL https://get.docker.com | sh
sudo usermod -aG docker "$USER"

# 2. Diretórios
sudo mkdir -p /opt/piidetector/{app,uploads,tmp,db,traefik}
sudo chown -R "$USER":"$USER" /opt/piidetector

# 3. Clone repositório (pré‑gerado no Replit ou GitHub)
git clone https://github.com/ness/piidetector.git /opt/piidetector/app

# 4. Arquivos Traefik
cat >/opt/piidetector/traefik/traefik.yml <<EOF
api:
  dashboard: true
entryPoints:
  web:
    address: ":80"
  websecure:
    address: ":443"
certificatesResolvers:
  letsencrypt:
    acme:
      email: $EMAIL
      storage: /letsencrypt/acme.json
      httpChallenge:
        entryPoint: web
EOF

mkdir -p /opt/piidetector/traefik/letsencrypt
touch /opt/piidetector/traefik/letsencrypt/acme.json
chmod 600 /opt/piidetector/traefik/letsencrypt/acme.json

cat >/opt/piidetector/traefik/dynamic.yml <<EOF
http:
  routers:
    api:
      rule: "Host(\`api.$DOMAIN\`)"
      service: api
      entryPoints: [websecure]
      tls:
        certResolver: letsencrypt
    ui:
      rule: "Host(\`$DOMAIN\`)"
      service: ui
      entryPoints: [websecure]
      tls:
        certResolver: letsencrypt
  services:
    api:
      loadBalancer:
        servers:
          - url: "http://piid-api:3000"
    ui:
      loadBalancer:
        servers:
          - url: "http://piid-frontend:80"
EOF

# 5. .env produção
cat >/opt/piidetector/.env <<EOF
NODE_ENV=production
PORT=3000
POSTGRES_USER=pii
POSTGRES_PASSWORD=$PII_DB_PASS
POSTGRES_DB=piidetector
DATABASE_URL=postgresql://pii:$PII_DB_PASS@postgres:5432/piidetector
REDIS_URL=redis://redis:6379
SESSION_SECRET=$SESSION_SECRET
OPENAI_API_KEY=$OPENAI_API_KEY
UPLOAD_DIR=/uploads
TMP_DIR=/tmp
EOF

# 6. docker-compose.yml
cat >/opt/piidetector/docker-compose.yml <<'EOF'
version: "3.9"

services:
  traefik:
    image: traefik:v3.0
    command:
      - "--providers.file.filename=/dynamic.yml"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    volumes:
      - "./traefik/traefik.yml:/traefik.yml:ro"
      - "./traefik/dynamic.yml:/dynamic.yml:ro"
      - "./traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

  api:
    build: ./app
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(\`api.${DOMAIN}\`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certResolver=letsencrypt"
    volumes:
      - ./uploads:/uploads
      - ./tmp:/tmp
    depends_on:
      - postgres
      - redis
      - clamav
    restart: unless-stopped

  worker:
    build: ./app
    command: ["npm","run","worker"]
    env_file: .env
    volumes:
      - ./uploads:/uploads
      - ./tmp:/tmp
    depends_on:
      - postgres
      - redis
      - clamav
    restart: unless-stopped

  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui.rule=Host(\`${DOMAIN}\`)"
      - "traefik.http.routers.ui.entrypoints=websecure"
      - "traefik.http.routers.ui.tls.certResolver=letsencrypt"
    restart: unless-stopped

  postgres:
    image: postgres:16
    env_file: .env
    volumes:
      - ./db:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    restart: unless-stopped

  clamav:
    image: mkubecek/clamav:alpine
    restart: unless-stopped
    volumes:
      - clamav_db:/var/lib/clamav

volumes:
  clamav_db:
EOF

# 7. Build & deploy
cd /opt/piidetector
docker compose build
docker compose up -d

# 8. Prisma migrations + seed
docker compose exec api npx prisma migrate deploy
docker compose exec api npm run seed

echo "✅ Instalação concluída!
• Frontend:  https://$DOMAIN
• API docs:  https://api.$DOMAIN/docs (Swagger)
Usuário admin padrão: admin@ness.com.br / ChangeMe!"
