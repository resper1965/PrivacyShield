import React, { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { useQuery, useMutation, useQueryClient } from 'react-query';

const sections = [
  { key: 'general', label: 'Geral' },
  { key: 'upload', label: 'Upload & Processamento' },
  { key: 'detection', label: 'Detecção de PII' },
  { key: 'queue', label: 'Fila & Workers' },
  { key: 'patterns', label: 'Padrões Regex' },
  { key: 'reports', label: 'Relatórios' },
  { key: 'notifications', label: 'Notificações' },
  { key: 'security', label: 'Segurança' },
  { key: 'users', label: 'Usuários & Permissões' },
];

export default function SettingsPage() {
  const [active, setActive] = useState('upload');
  const queryClient = useQueryClient();

  const { data: config, isLoading } = useQuery('config', () =>
    fetch('/api/v1/config').then(res => res.json())
  );

  const mutation = useMutation(
    updates => fetch('/api/v1/config', {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updates)
    }).then(res => res.json()),
    {
      onSuccess: () => queryClient.invalidateQueries('config')
    }
  );

  const { control, handleSubmit, reset } = useForm({ defaultValues: {} });

  useEffect(() => {
    if (config) reset(config);
  }, [config, reset]);

  const onSubmit = data => {
    mutation.mutate(data);
  };

  if (isLoading) {
    return <div className="text-[#E0E1E6] p-6">Carregando configurações...</div>;
  }

  return (
    <div className="flex h-full text-[#E0E1E6] bg-[#0D1B2A]">
      <aside className="w-60 bg-[#112240] p-4">
        <ul className="space-y-2">
          {sections.map(s => (
            <li key={s.key}>
              <button
                className={`w-full text-left px-3 py-2 rounded hover:bg-[#1B263B] ${active === s.key ? 'bg-[#1B263B] font-medium' : ''}`}
                onClick={() => setActive(s.key)}
              >
                {s.label}
              </button>
            </li>
          ))}
        </ul>
      </aside>

      <main className="flex-1 p-6 overflow-auto">
        <h2 className="text-2xl mb-4">Configurações - {sections.find(s => s.key === active)?.label}</h2>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">

          {active === 'upload' && (
            <div className="space-y-4">
              <div>
                <label className="block mb-1">Tamanho máximo de upload (MB)</label>
                <Controller
                  name="MAX_UPLOAD_MB"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="number"
                      className="w-32 px-3 py-2 bg-[#0D1B2A] border border-[#1B263B] focus:outline-none focus:border-[#00ade0] rounded"
                    />
                  )}
                />
              </div>

              <div>
                <label className="block mb-1">Tipos permitidos (extensões)</label>
                <Controller
                  name="ALLOWED_EXTS"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                      placeholder=".zip,.pdf,.docx"
                      className="w-full px-3 py-2 bg-[#0D1B2A] border border-[#1B263B] focus:outline-none focus:border-[#00ade0] rounded"
                    />
                  )}
                />
                <small className="text-[#A5A8B1]">Separe por vírgula</small>
              </div>

              <div>
                <label className="block mb-1">Profundidade máxima de extração ZIP</label>
                <Controller
                  name="ZIP_MAX_DEPTH"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="number"
                      className="w-24 px-3 py-2 bg-[#0D1B2A] border border-[#1B263B] focus:outline-none focus:border-[#00ade0] rounded"
                    />
                  )}
                />
              </div>

              <div>
                <label className="block mb-1">Razão ZIP-Bomb</label>
                <Controller
                  name="ZIP_BOMB_RATIO"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="number"
                      className="w-24 px-3 py-2 bg-[#0D1B2A] border border-[#1B263B] focus:outline-none focus:border-[#00ade0] rounded"
                    />
                  )}
                />
              </div>

              <div className="flex space-x-4">
                <div>
                  <label className="block mb-1">ClamAV Host</label>
                  <Controller
                    name="CLAMAV_HOST"
                    control={control}
                    render={({ field }) => (
                      <input
                        {...field}
                        type="text"
                        className="w-48 px-3 py-2 bg-[#0D1B2A] border border-[#1B263B] focus:outline-none focus:border-[#00ade0] rounded"
                      />
                    )}
                  />
                </div>

                <div>
                  <label className="block mb-1">ClamAV Port</label>
                  <Controller
                    name="CLAMAV_PORT"
                    control={control}
                    render={({ field }) => (
                      <input
                        {...field}
                        type="number"
                        className="w-32 px-3 py-2 bg-[#0D1B2A] border border-[#1B263B] focus:outline-none focus:border-[#00ade0] rounded"
                      />
                    )}
                  />
                </div>
              </div>
            </div>
          )}

          {/* Outros blocos de configuração podem ser adicionados aqui conforme active */}

          <div className="pt-4 border-t border-[#1B263B] flex justify-end space-x-3">
            <button
              type="button"
              className="px-4 py-2 border border-[#00ade0] rounded hover:bg-[#1B263B]"
              onClick={() => reset(config)}
            >Cancelar</button>
            <button
              type="submit"
              className="px-4 py-2 bg-[#00ade0] text-[#0D1B2A] rounded hover:opacity-90"
              disabled={mutation.isLoading}
            >
              {mutation.isLoading ? 'Salvando...' : 'Salvar'}
            </button>
          </div>
        </form>
      </main>
    </div>
  );
}
