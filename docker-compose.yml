version: "3.9"

services:
  traefik:
    image: traefik:v3.0
    command:
      - "--providers.file.filename=/dynamic.yml"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    volumes:
      - "./traefik/traefik.yml:/traefik.yml:ro"
      - "./traefik/dynamic.yml:/dynamic.yml:ro"
      - "./traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    restart: unless-stopped
    networks:
      - pii-network

  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: piid-api
    env_file: .env
    environment:
      - NODE_ENV=production
      - PORT=3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certResolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
    volumes:
      - ./uploads:/uploads
      - ./tmp:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clamav:
        condition: service_started
    restart: unless-stopped
    networks:
      - pii-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: piid-worker
    command: ["npm", "run", "worker"]
    env_file: .env
    environment:
      - NODE_ENV=production
    volumes:
      - ./uploads:/uploads
      - ./tmp:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clamav:
        condition: service_started
    restart: unless-stopped
    networks:
      - pii-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: piid-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.ui.entrypoints=websecure"
      - "traefik.http.routers.ui.tls.certResolver=letsencrypt"
      - "traefik.http.services.ui.loadbalancer.server.port=80"
    restart: unless-stopped
    networks:
      - pii-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:16-alpine
    container_name: piid-postgres
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-pii}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-piidetector}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - pii-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pii} -d ${POSTGRES_DB:-piidetector}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: piid-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - pii-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  clamav:
    image: mkubecek/clamav:alpine
    container_name: piid-clamav
    restart: unless-stopped
    volumes:
      - clamav_db:/var/lib/clamav
    networks:
      - pii-network
    environment:
      - CLAMD_STARTUP_TIMEOUT=300
    healthcheck:
      test: ["CMD", "clamdscan", "--version"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 300s

volumes:
  clamav_db:
    driver: local
  redis_data:
    driver: local

networks:
  pii-network:
    driver: bridge